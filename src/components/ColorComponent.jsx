import React, { useEffect, useState } from "react";
import useDataSchema from "../hooks/useDataSchema";
import ComponentFields from "./tokens/ComponentFields";
import { addToDocument, showPreview } from "./utils";
import getColorName from "./utils/get-color-name";
import DraggableImage from "./tokens/DraggableImage";

const colorSplotch =
	"M956.48 551.464a48.777 48.777 0 0 0-1-10.4c-.985-5.288-2.742-10.318-3.918-15.505-1.785-7.9-5.286-15.153-8.084-22.646a39.919 39.919 0 0 0-3.288-7.514 33.991 33.991 0 0 1-3.7-7.32c-.1-.289-.473-1.24-1.6-.429a14.005 14.005 0 0 0 .951 3.745c2.775 5.587 4.532 11.63 6.806 17.437a181.427 181.427 0 0 1 6.13 18.973c.923 3.41 2.01 6.873 2.989 10.22 1.21 4.146 1.633 8.765 4.718 13.435M630.769 325.216c1.745-.077 2.353 1.664 4.414.951 2.038-.711 3.3-2.112 4.993-3.058a6.871 6.871 0 0 0 3.389-6c.09-2.018 1.745-1.31 2.618-2.249.158-4.085-.051-8.148-4.425-11.583-3.468 7.579-9.773 13.046-10.989 21.94m145.168 542.835c-9.711 4.738-30.934 21.376-33.828 30.12 2.578-1.621 5.483-1.936 6.378-5.312.327-1.238 2.19-1.981 2.967-3.2 1.115-1.744 3.2-.1 4.447-1.688 1.3-1.654 3.811-2.571 4.616-4.338 1.109-2.431 3.67-2.363 5.05-4.1 1.3-1.643 2.7-3.663 4.5-4.344 2.111-.8 2.342-3.781 4.7-3.607 2.494.18 1.852-3.545 4.318-3.128 2.156-2.509 5.562-3.483 7.577-6.212.715-.973 1.075-1.7.045-2.746-2.826.416-4.768 2.588-6.812 3.95-1.492-.214-2.027-2.166-3.586-1.08-.1.107-.355.259-.36.411-.028 1.688-.017 3.37-.017 5.278m53.35 25.096c-6.1 2.2-9.474 7.63-14.591 10.865a152.9 152.9 0 0 0-14.952 11.253c-4.971 4.074-9.728 8.406-14.541 12.6a2.715 2.715 0 0 0 3.259-.174c3.412-3.522 9.294-3.348 11.9-8.018 3.535-.056 5.129-3.021 7.51-4.861a8.572 8.572 0 0 1 5.382-2.048 11.534 11.534 0 0 1 5.4-5.227c2-.923 3.13-3.443 5.585-3.995-1.638-3.455-1.374-3.776 3.71-5.16-.141-.793-1.379-.945-1-2.571a646.25 646.25 0 0 1 2.331-2.667m-162.72-185.224c7.544-9.706 13.46-20.2 19.067-30.851 6.755-12.823 13.15-25.838 19.8-38.717a3.345 3.345 0 0 0-.208-3.972c-13.91 23.311-26 47.371-38.618 71.149-.332.625-.045 1.587-.045 2.391M203.149 376.304c-2.157 2.158-4.316 4.008-6.091 6.176-1.744 2.126-4.113 3.489-5.964 5.559-2.476 2.771-4.256 6.05-6.974 8.616-5.394 5.088-9.826 11-14.438 16.792-7.227 9.073-12.771 19.174-18.71 29.041-1.369 2.272-2.374 4.766-3.547 7.159 19.2-23.644 35.613-49.278 56.146-71.728.14-.154-.18-.729-.422-1.615m287.814 656.757c.462 1.9.732 3.033 1 4.158-3.388.163-1.3 4.484-4.542 5.379-3.441.219-7.547-.4-11.523 1.2-1.833.731-1.665 1.367-.807 2.616 3.043-.062 6.172.585 8.6-1.328 1.478.568.488 2.2 1.828 2.605 3.941 0 8.275.957 11.887-.253 3.992-1.339 7.763-.737 11.612-.968 4-.236 8.031-.051 12.048-.051 1.057 0 2.115.045 3.167-.022a3.15 3.15 0 0 0 1.052-.512c.021-1 .392-2.037-.245-2.988-3.745 1.457-3.645 1.283-6.189-.968-1.34-1.193.089-1.953-.151-2.74-.7-2.313-3.292-1.142-4.528-2.285-1.159-.776.882-2.476-1.2-3.066-.884 2 .8 4.906-2.325 6.026-3.369-1.592-3.369-1.592-5.61 1.891-.108 1.6 2.411.112 2.367 2.02-1.572-.219-3.381 1.272-3.831-1.755-.136-.9-2.579-1.457-3.372-1.868-1.469-.107-1.485 1.44-2.493.8-1.653-1.047-1.793-2.886-2.639-4.209.732-1.086 2.01-1.536 2.208-2.661-2.073-1.294-2.621 1.587-4.295.861-.4-.371-.854-.8-2.015-1.885m40.358-160.927c.194-4.507 3.22-8 4.248-12.21 1.262-5.165 2.957-10.212 4.33-15.355 1.17-4.389 2.553-8.682 3.391-13.189.858-4.619 2.726-9.02 3.85-13.633 1.164-4.771 2.134-9.644 3.766-14.28a60.14 60.14 0 0 0 2.507-7.849 40.854 40.854 0 0 1 2.6-9.059c1.336-2.858.136-6.634 3.4-8.8.788-.518.424-1.93.122-2.909-.154-.489-.853-1.238-.781-1.305 2.681-2.521 1.69-6.24 3.3-9.464-1.217.236-1.91 0-2.4 1.5-2.239 6.881-4.913 13.622-7.089 20.52-.765 2.425-2.238 4.788-1.737 7.534-3.02 5.019-3.593 10.893-4.8 16.357-1.241 5.621-2.889 11.18-4.346 16.689-3.222 12.165-5.824 24.526-9.933 36.449.73 3.055-2.616 5.689-.419 9m-410.1-69.287c-.764-1.5-1.205-3.185-2.281-4.175-.592-.546-1.536-.366-1.907-1.722a157.754 157.754 0 0 0-5.123-16.267c-1.066-2.7-1.4-5.728-3.5-8.08-5.633-6.291-11.111-12.722-16.628-19.114-.517-.6-1.4-.911-1.4-1.964 0-1.469-1.4-2-2.238-2.847-.737-.743-1.247-2-3.183-2.088a200.594 200.594 0 0 0 13.209 24.707q6.768 11.191 13.9 22.152c2.171 3.32 3.943 6.825 5.832 10.286.245.444.809.715 1.054.923.788-.63 1.446-1.154 2.266-1.812m351.046-355.487c2.684-.436 2-3.023 3.524-4.3a23.394 23.394 0 0 0 3.941-4.619c4.517-6.479 9.6-12.569 14.531-18.761 3.556-4.463 7.272-8.887 10.509-13.489s7.11-8.752 10.087-13.522c2.831-4.528 7.5-7.8 8.917-13.282-3-2.125-5.3-2.135-7.693.767-3.453 4.2-6.592 8.653-9.777 13.063-2.22 3.076-4.062 6.444-6.473 9.35-4.757 5.726-8.528 12.13-12.491 18.348-4.792 7.521-9.558 15.065-14.443 22.525a3.988 3.988 0 0 0-.632 3.922m260.978 470.598c2.421-2.47 5.663-3.5 8.619-5.075 3.49-1.862 6.677-4.282 10.122-6.246 1.306-.743.9-3.275 3.158-2.8 3.383-6.11 8.861-10.021 14.44-14 .766.523 1.391.945 1.976 1.345.614-.585 1.227-1.165 1.818-1.727-.428-.467-.822-.906-1.21-1.333.844-1.491 2.916.411 3.659-1.44-.766-.293-1.5-.568-2.229-.85.208-3.865.2-3.888 3.76-4.653.7-.152 1.126-.422 1.109-1.176.169-1.047-.8-1.373-1.25-2.009.687-1.446 3.558-1.941 2.257-4.158-4.053 1.305-6.26 4.7-9.266 7.05-3.5 2.729-7.195 5.2-10.544 8.175-3.231 2.875-6.519 5.728-9.857 8.44-3.772 3.055-7.983 5.587-11.411 9.093-1.188 1.21-2.2 2.948-3.642 3.46-1.92.681-3.029 2.042-4.352 3.28-1.413 1.328-2.753 2.729-4.048 4.023 2.516 2.234 4.785-2.543 6.891.6m-52.692 158.418a3.31 3.31 0 0 0 3.558.163c5-2.273 10.279-3.9 15.414-5.75 9.244-3.348 18.195-7.281 27.089-11.377a473.529 473.529 0 0 0 44.434-23.182c6.142-3.657 12.239-7.4 18.155-11.417 6.328-4.293 12.323-9.076 18.634-13.4 6.052-4.147 11.45-9.1 17.283-13.515 4.9-3.708 8.923-8.462 14.2-11.726a14.644 14.644 0 0 0 2.714-2.667c.856-.917 2-1.666 2.449-2.751a1.765 1.765 0 0 0-2.635.405 53.62 53.62 0 0 1-9.035 7.472c-7.487 5.261-14.276 11.366-21.583 16.824-3.9 2.914-7.611 6.285-11.664 8.777-9.137 5.627-17.857 11.872-27.033 17.454-12.328 7.506-25.158 14.033-37.673 21.156-2.972 1.694-6.344 2.223-9.21 3.871a113.354 113.354 0 0 1-19.686 9.273c-5.2 1.789-9.925 4.614-15.312 6.111a33.55 33.55 0 0 0-10.1 4.276M55.442 415.909l1.872-1.955c-1.373-1.039-1.471-2.727-2.3-3.976.8-2.431 4.239.455 4.776-2.384-.49-1.075-2.171-.042-2.442-1.471-.384-2.186 1.28-3.657 1.915-5.456 1.021-.271 2.166.482 3.045-.52-1.017-1.317-1.9-2.683-.77-4.33 2.25-3.27 2.877-7.567 6.3-10.084 1.24-.916.727-2.841 2.222-3.538-.87-3.006 1.313-4.981 2.581-7.181 4.143-7.192 8.191-14.456 12.743-21.387 6.044-9.2 12.109-18.444 18.96-27.039 4.724-5.929 8.945-12.364 14.676-17.48.9-.8 1-1.671.182-2.3-23.129 19.994-38.891 45.266-52.278 72.285-.79-.832-1.42-1.765-2.719-1.2a45.99 45.99 0 0 1-3.108 6.283c-1.63 2.363-1.632 4.421.194 6.214a13309.48 13309.48 0 0 0-3.365 6.36c-1.033.1-2.36-.1-2.593.309-1.649 2.93-4.379 5.556-2.889 9.474-2.845-.194-2.479 2.515-3.847 3.491 1.042 2.144-2.875 3.554-.7 6.125 1.553 1.834.662 3.668-1.693 4.514-.305-.308-.606-.606-1.031-1.033.222 1.92-2.626 2.68-1.688 4.675 1.045 1.088 1.429-1.755 2.56.121-1.348 3.258-2.409 6.91-4.316 10.049-1.271 2.1-1 3.62-.464 5.96 1.478-2.557 1.8-5.281 4.556-6.174-.881-.886-1.9-1.582-.653-3.1 1.133-1.386 2.488-1.233 3.931-1.349a.483.483 0 0 0 .31-.855l-2.556-.906c2.43-4.589 4.095-9.383 7.254-13.468l1.336 1.335m56.414-26.6c4.81-2.652 6.942-7.085 10.176-10.39a104.458 104.458 0 0 0 7.634-9.481c2.672-3.472 5.965-6.339 8.579-9.758a137.058 137.058 0 0 1 12.2-14.6c1.2-1.186 2.859-2.2 3.463-3.645 1.623-3.887 5.209-5.884 7.809-8.8s4.363-6.528 7.538-9.006c.84-.655 1.868-.555 2.719-1.855 3.514-5.346 9.176-8.945 12.519-14.533 2.579-.359 2.758-3.1 4.384-4.444 1.649-1.363 3.069-3 4.729-4.663-3.061-1.326-3.668 1.361-5.09 2.2a107.023 107.023 0 0 0-17.527 12.865 254.722 254.722 0 0 0-28.669 31.3c-2.178 2.762-4.761 5.153-6.781 7.961q-10.336 14.372-20.2 29.083a20.093 20.093 0 0 0-3.484 7.763m228.227-228.521c-2.444-1.834-3.969-.792-5.52.354v4.342c-3.84.194-2.975 5-6.512 6.54-2.9 1.265-5.006 4.362-7.436 6.621.611 1.417 2.618.336 3.073 2.139 2.131-1.885 3.624-4.719 7.042-4.05v-3.007c2.5-.654 3.983-2.68 5.7-4.39 1.625-1.622 4.727-1.765 4.88-4.857 3.041.289 2.9-3.233 5.116-4.251 1.987-.909 3.428-3.034 5.064-4.668 1.735-1.729 3.043-3.968 4.687-5.568s2.805-3.715 4.7-5.034c1.984-1.38 4.559-2.23 5.454-4.637.963-2.583 2.905-3.75 5.261-4.789-.98-4.069 2.3-4.277 5.181-4.836-.66-.657-.96-.958-1.273-1.27.079-1.529 1.765-.329 2.234-1.328 1.28-2.729 2.443-5.806 5-7.379 2.873-1.764 4.3-4.633 6.524-6.849 8.758-8.714 17.679-17.244 26.894-25.471.628-.559 1.133-1.545 1.833-1.692 4.169-.874 6.272-4.421 9.3-6.782 3.271-2.55 6.032-5.862 9.429-7.971 5.118-3.172 10.115-6.369 14.133-10.611.839.306.907 1.252 1.359 1.026 2.437-2.251 4.335-5.4 6.811-5.95 3.337-.746 4.33-3.237 7.317-5.127-6.037.631-6.037.631-9.257 3.771-2-1.508-4.08 1.51-6.422-.093-.545 2.3-.163 5.421-3.983 4.971a1.453 1.453 0 0 0-1.553.818c-1.777 3.92-5.913 5.071-8.959 7.432-2.4 1.862-4.99 4.215-8.3 3.337a12.071 12.071 0 0 1-5.823 6.449l-1.679-1.561-2.211 4.875c-2.2.072-4.078 1.168-5.987 2.235v2.519c-2.036.3-3.206 1.82-4.416 3.176-1.112 1.249-3.113 1.2-3.724 3.447-.431 1.6-2.52 2.745-3.869 4.09-1.429.31-3.068-.378-4.738.728l3.5 1.37c-3.4.114-3.4 2.808-4.943 4.163-2.544 2.235-4.836 4.752-7.233 7.148 1.056 2.569-2.744 1.121-2.626 3.293.14 2.522-3.1-.1-3.573 1.885.359.455.692.874.371.471-3.015 3.02-5.815 5.824-8.614 8.63-.655.879-.823-1.584-1.83-.394-1.786 1.8 2.894 2.491.59 4.34-.849.259-.872-1.373-1.952-.664-.623 1 .468 2.512-.847 3.442-.652-.827-1.322-1.671-1.91-1.452-1.392.6-1.233 1.286-1.224 1.894.044 2.7-.485 5.069-3.413 6.108-.04 2.6-2.843 2.408-4.018 3.93-1.287 1.664-3.332 2.806-4.377 4.572-3.376 5.7-8.884 9.339-13.244 14.566M6.426 525.819c-1.826-1.144-1.609-3.154-1.15-4.547 2.908-8.831 4.374-18.025 6.988-26.943a92.238 92.238 0 0 0 3.129-14.629c.48-3.941 2.446-7.492 3.038-11.469.637-4.279 2.46-8.306 3.4-12.573.793-3.6 2.868-6.823 3.8-10.5a162.433 162.433 0 0 1 5.046-15.7c1.2-3.3 1.961-6.863 4.332-9.63.625-.727.487-1.517.753-2.246a82.044 82.044 0 0 1 3.7-9.276c3.187-6.288 5.766-12.886 9.045-19.12 2.383-4.526 4.482-9.168 6.722-13.75q3.239-6.614 6.741-13.1a294.223 294.223 0 0 1 18.01-29.4 239.584 239.584 0 0 1 16.91-21.038c4.857-5.477 9.565-11.117 15.072-15.869 4.419-3.813 8.308-8.287 12.986-11.632 4.412-3.153 8.681-6.57 12.983-9.814q14.949-11.263 30.7-21.269c6.179-3.934 12.484-7.763 18.579-11.781 7.149-4.712 14.781-8.581 21.942-13.27 4.192-2.743 8.9-5.027 13.337-7.54 4.3-2.433 8.9-4.251 13.041-6.952a145.582 145.582 0 0 1 13.025-6.992c4.079-2.1 7.952-5.283 12.86-5.728 2.1-3.459 6.235-3.452 9.325-5.177 3.059-1.708 6.335-3.267 9.257-5.141 3.013-1.932 6.137-3.82 9.171-5.649 6.163-3.713 11.932-7.989 18.048-11.695 3.736-2.263 6.508-5.482 9.943-8a122.9 122.9 0 0 0 18.064-16.424 32.332 32.332 0 0 1 7.445-6.332c2.148-1.256 2.215-3.78 4.02-5.283 2.919-2.428 5.431-5.346 8.168-8 .909-.883 1.709-1.755 1.469-3.109l3.239-.352c.975-.958-.615-.842-.515-1.629 1.019-1.2 1.814-2.75 3.656-3.311 1.73-.529 1.424-2.615 2.791-3.673 2.975-2.307 3.688-6.978 8.077-7.934 1.222-3.521 4.2-5.8 6.265-8.723a7.358 7.358 0 0 1 4.367-3.2c1.674-.366.56-3.5 3.031-3.153 2.565-5.777 8.317-8.448 12.729-12.205 7.079-6.009 13.735-12.601 21.888-17.465 4.076-2.433 7.606-6.141 11.71-8.7 9.229-5.749 18.08-12.138 28-16.771 4.1-1.916 7.774-4.747 11.887-6.623 8.726-3.985 17.458-7.984 26.477-11.292 1.688-.618 3.255-1.552 5.246-1.207 2.139.368 2.885-2.088 4.8-2.724 2.271-.757 4.684-.338 7-1.571 1.273-.681 3.537-.818 5.018-1.6 4.808-2.554 10.491-2.037 15.236-4.7 1.8-1.007 4.064-.622 5.979-.743 6.505-.412 12.465-3.778 19.018-3.307a20.818 20.818 0 0 0 10.037-1.93c1.008-.445 2.043-.96 2.877-.608 2.9 1.238 5.708-.035 8.506-.193 2.989-.168 5.888-1.375 9.018-1.182 3.169.193 6.6.8 9.486-.124C607.31-.331 612.439.347 617.567.303c2.567-.021 5.359-1.14 7.8 1.123 1.284 1.189 2.364-2.745 4.284-.648 1.143 1.245 2.432.881 3.907.117 1.345-.7 2.91 1.566 4.205.515 1.278-1.032 3.355-1.86 3.817-1.093 1.165 1.925 2.944-.715 3.783.942a.636.636 0 0 0 .529.217c5.635-.671 10.966 1.82 16.652 1.426a27.276 27.276 0 0 1 10.086 1.614 57.66 57.66 0 0 0 9.339 1.881c5.359.823 10.24 3.228 15.56 3.988 1.441.207 1.79 3.738 4.1 1.363 1.165 1.834 3.1.748 4.571 1.254 1.1.373 1.953 1.478 3.186 2.477 2.984-.282 5.759 1.091 8.816 2.307a148.333 148.333 0 0 1 17.052 7.933c7.521 4.158 15.34 8.012 21.358 14.389 1.239 1.314 2.764.238 3.969 1.27 7.026 6 14.637 11.256 20.587 18.549 2.494 3.051 6.2 5.309 8.776 8.418 5.185 6.243 11.169 11.741 15.5 18.826 2.573 4.2 5.894 8.136 8.636 12.363 5.68 8.779 11.023 17.764 14.474 27.687 2.578 7.42 5.32 14.787 7.307 22.425.681 2.627.428 5.37 1.295 7.712a17.712 17.712 0 0 1 1.053 7.162c-.09 1.918 1.818 3.083 1.43 5.216-.3 1.664-.659 3.577.974 5.316.743.8.174 2.831.18 4.307.011 2.118.327 4.307-.1 6.335-.355 1.667 2.336 3.065.191 4.652 2 1.629.991 3.88 1.148 5.868.146 1.9.034 3.81.034 5.717v6.358c0 1.9-.5 3.985.1 5.682 1.16 3.272.281 6.614.991 9.936.777 3.647.3 7.595.141 11.4-.146 3.321 1.847 6.218 1.4 9.656-.428 3.335-.861 7.008.113 10.094 1.092 3.486.011 7.215 1.357 10.215 1.61 3.575.062 7.09 1.047 10.385 2.162 7.187 1.97 14.813 3.941 21.905 2.483 8.951 3.845 18.155 6.778 27.025 1.908 5.772 4.008 11.508 5.911 17.283 1.891 5.721 4.948 11.1 7.8 16.453a141.813 141.813 0 0 0 12.492 19.006c4.633 6.083 10.133 11.389 14.839 17.375 2.145 2.727 4.751 5 6.829 7.814 2.24 3.037 5.663 5.2 7.915 8.222 5.641 7.575 13.252 13.492 18.059 21.735 8.653 8.184 14.085 18.847 21.465 28.022 3.676 4.571 6.074 10.161 9.12 15.244 5.067 8.444 9.244 17.332 13.505 26.189a205.028 205.028 0 0 1 9.891 25.142c2.026 6.159 3.749 12.422 5.888 18.542.867 2.482-.355 5.4 1.762 7.527-.231 5.952 2.978 11.4 2.544 17.38 1.953 3.46 1.4 7.264 1.177 10.91-.169 2.78 2 4.861 1.469 7.759-.49 2.661-.884 5.8.068 8.175 1.723 4.321.98 8.609 1.047 12.891q.253 14.931-.017 29.866c-.056 3.269 1.036 6.662-.715 9.847-1.537 2.8.608 6.161-1.317 9-.7 1.035 1.272 1.7.89 3.106-.749 2.746.839 5.683-1 8.513-1.43 2.189.737 5.278-1.385 7.7-1.278 1.457 3.018 3.533-.2 5.188.535 3.545-.7 6.87-1.289 10.274-.484 2.819.822 5.711-.884 8.547-1.452 2.414.811 5.818-1.655 8.2.923 4.2-1.5 8.007-1.4 12.187a36.074 36.074 0 0 1-1.571 9.475c-1.216 4.805-2.3 9.65-3.254 14.5a48.861 48.861 0 0 1-1.407 5.171c-.3.945-1.334 1.39-1.323 2.65.067 7.934-2.865 15.276-5.235 22.613-1.424 4.423-2.455 9.076-4.706 13.313-.608 1.154-.557 3.28-1.526 4.4-2.837 3.309-3.53 7.5-4.864 11.355a22.112 22.112 0 0 1-2.826 5.829c-.236.343-.844.6-.85.906-.085 5.672-3.789 9.9-5.945 14.714-2.083 4.653-5.039 8.93-7 13.628-3.946 9.475-9.812 17.927-14.119 27.2a74.829 74.829 0 0 1-4.751 7.905c-.7 2.11 1.216 2.279.923 3.927-.3 1.446-1.768 2.042-3.732 2.532.867 4.636-2.657 7.675-4.723 11.146a349.305 349.305 0 0 1-15.718 24c-3.659 5.115-7.183 10.3-11.5 15.018-13.663 14.939-27.883 29.32-42.48 43.308-5.568 5.329-11.141 10.719-16.984 15.749-4.96 4.276-9.942 8.62-15.149 12.553-12.171 9.194-24.359 18.382-37.222 26.659-9.829 6.324-20 12.024-30.163 17.763a268.076 268.076 0 0 1-19.956 10.162q-16.3 7.469-32.9 14.213c-10.431 4.214-21.561 6.11-31.739 10.876-6.919.017-12.948 4.316-19.912 4.119-2.95 2.02-6.57 1.677-9.807 2.3-3.321.636-6.609 2.172-10.251 1.62-1.661-.253-3.164 1.559-5.19 1.232-1.689-.27-3.547-.354-5.055.895-1.548-2-2.516 1.03-4.211.445a8.672 8.672 0 0 0-5.635-.022c-4.036 1.615-8.456.1-12.148 1.407-4 1.418-7.949.034-11.6 1.153-4.481 1.379-8.658-1.075-12.993-.191-.377.079-.935-.726-1.419-1.131-.923.377-.467 1.4-1.041 2.335-1.424-.793-2.792-1.969-4.34-2.318-1.818-.405-3.795-.1-6.015-.1a4065.121 4065.121 0 0 1-3.288 4.006c-2.542-.608-4.519.265-6.655-.838-.933-.484-3.232.439-4.9.737-2.187.388-4.113-2.082-5.666-1.024-2.071 1.412-4.036.883-6.011.889q-27.662.118-55.323.006c-1.975-.006-4.246.917-5.878-1.126-2.019 3.112-3.84-.624-5.918-.214-1.907.382-3.894-.405-5.874-.923-3.374-.878-7.147-.157-10.747-.27-2.409-.073-4.755.366-7.193-1.1-1.945-1.165-4.663-.3-7.164-.94-3.012-.771-6.216-1.817-9.5-1.767-2.225.034-4.356.1-6.538-1.125-1.623-.912-4.193.737-5.762-1.4-4.328.253-8.222-1.581-12.316-2.476a251.005 251.005 0 0 1-28.974-8.367c-7.967-2.774-15.984-5.418-23.921-8.265a118.59 118.59 0 0 1-7.629-3.061c-8.959-3.972-18.088-7.742-26.522-12.665-7.513-4.389-15.242-8.44-22.585-13.167-3.9-2.515-8.387-4.276-12.475-6.651-9.628-5.587-19.085-11.433-28.247-17.763-8.033-5.554-16.22-10.893-23.108-17.943-1.809-1.857-4.148-3.185-6.081-4.929-2.2-1.986-3.964-4.557-6.382-6.172-3.147-2.1-5.512-5.013-8.478-7.18-2.3-1.682-2.042-5.283-5.659-6.037-2.628-.546-2.707-4.845-5.8-5.6-1.045-3.922-5.449-4.755-7.338-8.266-1.828-3.4-5.475-5.812-8.324-8.659s-6.06-5.43-8.483-8.614c-4.458-5.857-10.267-10.46-14.781-16.149-4.309-5.424-9.823-9.925-12.976-16.193-.746-1.485-2.064-.872-2.908-1.818-.879-.979-.753-2.307-1.7-3.156a96.72 96.72 0 0 1-10.248-11.54c-4.589-5.688-9.033-11.529-13.655-17.161-7.186-8.761-13.424-18.118-19.622-27.537-4.038-6.133-7.858-12.412-11.74-18.647-4.509-7.241-9.08-14.444-13.431-21.775-3.313-5.593-6.251-11.405-9.5-17.032-2.577-4.462-5.326-8.823-8.08-13.183-3.81-6.02-7.41-12.187-11.167-18.213a269.806 269.806 0 0 1-14.361-26.518 119.639 119.639 0 0 1-6.018-14.035 68.441 68.441 0 0 0-3.768-9.205c-2.994-5.914-4.232-12.26-6.244-18.416-.709-2.166-.814-4.361-1.352-6.448-.506-1.953-.809-3.894-1.208-5.852-1.194-5.857-1.3-11.94-3.5-17.594a2.628 2.628 0 0 1-.2-1.182c.76-6.684-1.889-13.1-1.366-19.823.466-5.976-2.059-11.839-1.192-17.9-2.171-3.432-.555-7.354-1.355-10.893C-.86 605.284.38 595.662.152 586.091c-.224-9.531-.021-19.063-.058-28.6-.028-6.758 1.679-13.291 2.737-19.891.226-1.426 1.206-2.948 1.07-4.586a9.386 9.386 0 0 1 2.525-7.194";

class ColorComponentDrawer {
	constructor() {
		const canvas = document.createElement("canvas");
		this.canvas = canvas;
		canvas.width = 1000;
		canvas.height = 1000;
		this.ctx = canvas.getContext("2d");
	}

	draw(props = {}) {
		Object.assign(this, props);

		this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

		return this.drawImage();
	}

	colorSplotch() {
		const ctx = this.ctx;
		this.canvas.width = 1000;
		this.canvas.height = 1100;

		ctx.fillStyle = this.color || "transparent";
		ctx.fill(new Path2D(colorSplotch), "evenodd");
		ctx.stroke();
	}

	colorCirlce() {
		this.canvas.width = 1000;
		this.canvas.height = 1000;

		const width = this.canvas.width;
		const height = this.canvas.height;
		const ctx = this.ctx;

		ctx.fillStyle = this.color || "transparent";
		// ctx.fillStyle = "#fff";
		ctx.strokeStyle = "#fff";
		ctx.shadowColor = "rgba(0,0,0,0.15)";
		ctx.shadowBlur = 10;
		ctx.shadowOffsetX = 2;
		ctx.shadowOffsetY = 2;
		ctx.lineWidth = width * 0.05;

		const radius = width / 2;
		ctx.arc(radius, radius, radius * 0.9, 0, 2 * Math.PI);
		ctx.fill();
		ctx.stroke();
	}

	// https://dribbble.com/shots/14216897-Hospitall-Color-Exploration-1
	circularColorPalette() {
		const canvas = this.canvas;
		const ctx = this.ctx;

		const fold = this.fold;
		const colors = [...Object.values(this.colors)];
		const height = 150; //Math.min(150, 1000 / colors.length);
		const strokeWidth = Math.max(15, height * 0.15);
		const lineWidth = this.stroke ? strokeWidth : 0;
		const sliceGap = !fold ? strokeWidth : 2;
		const radius = height / 2;
		const width = fold
			? colors.length * (radius + sliceGap) + radius
			: colors.length * (height + sliceGap) - sliceGap;
		canvas.height = height + strokeWidth;
		canvas.width = width + strokeWidth;

		ctx.strokeStyle = "#fff";
		ctx.shadowColor = "rgba(0,0,0,0.15)";
		ctx.shadowBlur = 10;
		ctx.shadowOffsetX = 2;
		ctx.shadowOffsetY = 2;
		ctx.lineWidth = lineWidth;
		ctx.strokeStyle = "#fff";

		ctx.translate(strokeWidth / 2, strokeWidth / 2);

		colors.forEach((color, index) => {
			ctx.save();

			ctx.translate(((fold ? radius : height) + sliceGap) * index, 0);

			ctx.beginPath();
			ctx.fillStyle = color;
			ctx.arc(radius, radius, radius - lineWidth / 2, 0, 2 * Math.PI);
			ctx.stroke();
			ctx.fill();
			ctx.restore();
		});
	}

	colorPalette() {
		const ctx = this.ctx;
		const colors = [...Object.values(this.colors)];
		const referenceHeight = 250;
		const sliceGap = this.stroke ? Math.max(15, referenceHeight / 15) : 0;
		const height =
			this.paletteStyle == "strip" ? 20 + sliceGap * 2 : referenceHeight;
		const sliceWidth = (referenceHeight * 9) / 10;
		const width =
			(sliceWidth - sliceGap) * colors.length + sliceGap * colors.length;
		this.canvas.height = height;
		this.canvas.width = width;

		const fullyRounded = this.roundedCorners == "full";
		const cornerRadius = Math.max(20, height * 0.2);

		ctx.fillStyle = "#fff";

		ctx.save();
		ctx.beginPath();
		ctx.strokeStyle = "#fff";
		const lineWidth = sliceGap;
		ctx.strokeStyle = "#fff";
		ctx.shadowColor = "rgba(0,0,0,0.2)";
		ctx.shadowBlur = 8;
		ctx.shadowOffsetX = 1;
		ctx.shadowOffsetY = 1;
		ctx.lineWidth = this.paletteStyle == "strip" ? 0 : lineWidth;
		ctx.roundRect(
			lineWidth,
			lineWidth,
			width - lineWidth * 2,
			height - lineWidth * 2,
			this.roundedCorners
				? fullyRounded
					? 1000
					: cornerRadius * 0.99
				: 0
		);
		ctx.stroke();
		ctx.restore();
		ctx.fill();
		ctx.clip();

		ctx.roundRect(
			lineWidth,
			lineWidth,
			width - lineWidth * 2,
			height - lineWidth * 2,
			this.roundedCorners ? (fullyRounded ? 1000 : cornerRadius) : 0
		);

		colors.forEach((color, i) => {
			ctx.save();
			ctx.translate(sliceWidth * i + sliceGap / 2, 0);
			ctx.beginPath();
			ctx.fillStyle = color;
			ctx.roundRect(
				0,
				lineWidth,
				sliceWidth - sliceGap / 2,
				height - lineWidth * 2,
				this.paletteStyle != "strip" &&
					this.roundedCorners &&
					sliceGap > 5
					? 5
					: 0
			);
			ctx.fill();
			ctx.restore();
		});
	}

	// https://dribbble.com/shots/2586383-The-Museum-Playbook-Website-Color-Guide
	colorCard() {
		const refWidth = 1000;
		this.canvas.width = refWidth;
		if (this.cardSize == "regular") this.canvas.height = refWidth * 1.27;
		else this.canvas.height = refWidth * 1.8;

		const inset = 20;
		const fontSize = refWidth / 8;
		const shadowOffset = fontSize / 4;
		const textInset = inset / 2 + shadowOffset + shadowOffset;
		const cornerRadius = textInset / 4;
		const canvas = document.createElement("canvas");
		canvas.width = this.canvas.width;
		canvas.height = this.canvas.height;
		const width = this.canvas.width - inset * 2;
		const height = this.canvas.height - inset * 2;
		const ctx = canvas.getContext("2d");

		ctx.save();
		ctx.fillStyle = "white";
		ctx.strokeStyle = "white";
		ctx.shadowColor = "rgba(0, 0, 0, 0.2)";
		ctx.shadowBlur = shadowOffset / 2;
		ctx.shadowOffsetX = 0.5;
		ctx.shadowOffsetY = 0.5;

		ctx.roundRect(inset, inset, width, height + inset * 0.5, cornerRadius);
		ctx.fill();
		ctx.restore();
		ctx.clip();

		ctx.fillStyle = "#fff";

		if (this.showColorCode) {
			if (this.showColorName) {
				ctx.fillStyle = this.color;
				ctx.fillRect(
					inset,
					inset,
					width,
					height - inset * 2 - fontSize * 2 - inset
				);

				ctx.fillStyle = "#777";
				ctx.letterSpacing = "0.12em";
				ctx.font = `500 ${fontSize / 1.7}px Helvetica`;
				ctx.fillText(
					getColorName(this.color).toUpperCase(),
					textInset,
					height - 7 - fontSize * 1.3
				);

				ctx.fillStyle = "#000";
				ctx.font = `500 ${fontSize / 1.3}px Helvetica`;
				ctx.fillText(
					this.color.toUpperCase(),
					textInset,
					height - fontSize / 2.5
				);
			} else {
				ctx.fillStyle = this.color;
				ctx.fillRect(
					inset,
					inset,
					width,
					height - inset * 3 - fontSize * 1.1 - shadowOffset
				);

				ctx.fillStyle = "#000";
				ctx.letterSpacing = "0.12em";
				ctx.font = `500 ${fontSize / 1.3}px Helvetica`;
				ctx.fillText(
					this.color.toUpperCase(),
					textInset,
					height - fontSize / 2
				);
			}
		} else if (this.showColorName) {
			ctx.fillStyle = this.color;
			ctx.beginPath();
			ctx.roundRect(
				inset * 1.5,
				inset * 1.5,
				width - shadowOffset - inset,
				height - inset * 2 - 5 - fontSize - shadowOffset,
				[cornerRadius, cornerRadius, 0, 0]
			);
			ctx.fill();

			ctx.fillStyle = "#777";
			ctx.letterSpacing = "0.12em";
			ctx.font = `500 ${fontSize / 1.7}px Helvetica`;
			ctx.fillText(
				getColorName(this.color).toUpperCase(),
				textInset,
				height - fontSize / 1.5
			);
		} else {
			ctx.fillStyle = this.color;
			ctx.beginPath();
			ctx.roundRect(
				inset * 1.5,
				inset * 1.5,
				width - shadowOffset - inset,
				height - inset - shadowOffset,
				cornerRadius
			);
			ctx.fill();
		}

		this.ctx.drawImage(canvas, 0, 0);
	}

	drawImage() {
		if (this.type == "Color palette") {
			if (this.paletteStyle == "circles") this.circularColorPalette();
			else this.colorPalette();
		} else {
			if (this.colorType == "circle") this.colorCirlce();
			else if (this.colorType == "splotch") this.colorSplotch();
			else this.colorCard();
		}

		const res = this.canvas.toDataURL();

		showPreview(res);

		return res;
	}
}

const defaultColorComponentProps = {
	type: "Color palette",
	// type: "Single color",
	// paletteStyle: "regular",
	paletteStyle: "circles",
	colorType: "card",
	color: "#9A136F",
	showColorCode: true,
	showColorName: true,
	cardSize: "regular",
	colors: [
		"#7ACE4F",
		"#FEBF00",
		"#F67E00",
		"#2E41DC",

		// "#FD4673",
		// "#F6D68C",
		// "#45B3A5",
		// "#2E6D92",
	],
	roundedCorners: false,
	stroke: true,
	// spacing: false,
	fold: true,
};

function ColorComponent() {
	const [data, updateField] = useDataSchema(
		"color",
		defaultColorComponentProps
	);

	return (
		<>
			<div className="px-12px mt-1">
				<ComponentFields
					schema={{
						type: {
							type: "card",
							choices: [
								"Single color",
								{ label: "Palette", value: "Color palette" },
							],
							meta: {
								renderChoice(value) {
									return value == "Single color" ? (
										<svg
											xmlns="http://www.w3.org/2000/svg"
											viewBox="0 0 1000 1000"
										>
											<path
												fill="#1cf297"
												d="M0 0h1000v1000H0z"
												data-name="Rectangle 16"
											/>
											<g
												fill="#fff"
												stroke="#fff"
												strokeWidth="5"
												data-name="Rectangle 14"
												transform="translate(292 227)"
											>
												<rect
													width="417"
													height="547"
													stroke="none"
													rx="12"
												/>
												<rect
													width="412"
													height="542"
													x="2.5"
													y="2.5"
													fill="none"
													rx="9.5"
												/>
											</g>
											<g
												fill="#9a136f"
												stroke="rgba(255,255,255,0)"
												strokeWidth="30"
												data-name="Rectangle 15"
											>
												<path
													stroke="none"
													d="M304 227h393a12 12 0 0 1 12 12v431H292V239a12 12 0 0 1 12-12Z"
												/>
												<path
													fill="none"
													d="M310 242h381a3 3 0 0 1 3 3v410H307V245a3 3 0 0 1 3-3Z"
												/>
											</g>
										</svg>
									) : (
										<svg
											xmlns="http://www.w3.org/2000/svg"
											viewBox="0 0 1000 1000"
										>
											<path
												fill="#4462e2"
												d="M0 0h1000v1000H0z"
												data-name="Rectangle 13"
											/>
											<g
												fill="#7ace4f"
												stroke="#fff"
												strokeWidth="30"
												data-name="Ellipse 2"
												transform="translate(101 264)"
											>
												<circle
													cx="236.5"
													cy="236.5"
													r="236.5"
													stroke="none"
												/>
												<circle
													cx="236.5"
													cy="236.5"
													r="221.5"
													fill="none"
												/>
											</g>
											<g
												fill="#febf00"
												stroke="#fff"
												strokeWidth="30"
												data-name="Ellipse 2"
												transform="translate(252 264)"
											>
												<circle
													cx="236.5"
													cy="236.5"
													r="236.5"
													stroke="none"
												/>
												<circle
													cx="236.5"
													cy="236.5"
													r="221.5"
													fill="none"
												/>
											</g>
											<g
												fill="#f67e00"
												stroke="#fff"
												strokeWidth="30"
												data-name="Ellipse 2"
												transform="translate(426 264)"
											>
												<circle
													cx="236.5"
													cy="236.5"
													r="236.5"
													stroke="none"
												/>
												<circle
													cx="236.5"
													cy="236.5"
													r="221.5"
													fill="none"
												/>
											</g>
										</svg>
									);
								},
							},
						},
						color: {
							type: "color",
							meta: {
								singleChoice: true,
								choiceSize: 30,
							},
							show: (state) => state.type == "Single color",
						},
						colors: {
							type: "swatch",
							show: (data) => data.type == "Color palette",
						},
						colorPicker: {
							show: (state) => state.type == "Single color",
							type: "grid",
							label: "",
							hint: "Click or drag and drop color to add to your canvas",
							choices: ["regular", "tall", "splotch", "circle"],
							noBorder: true,
							meta: {
								columns: 2,
								render(type) {
									const colorProps = {
										cardSize: type,
										colorType: ["regular", "tall"].includes(
											type
										)
											? "card"
											: type,
									};
									const url = new ColorComponentDrawer().draw(
										{ ...data, ...colorProps }
									);
									return (
										<DraggableImage
											className="p-3 h-full max-w-full object-fit"
											onClickOrDrag={() =>
												updateField({
													...data,
													...colorProps,
												})
											}
											src={url}
											style={{
												objectFit: "contain",
												filter: "drop-shadow(0.5px 0.5px 0.5px rgba(0, 0, 0, 0.4))",
											}}
										/>
									);
								},
							},
						},
						palettePicker: {
							show: (data) => data.type == "Color palette",
							type: "grid",
							label: "",
							hint: "Click or drag and drop palette to add to your canvas",
							choices: ["circles", "regular", "strip"],
							noBorder: true,
							meta: {
								columns: 1,
								aspectRatio: "2/0.8",
								render(paletteStyle) {
									const url = new ColorComponentDrawer().draw(
										{
											...data,
											paletteStyle,
										}
									);
									return (
										<DraggableImage
											className="p-3 h-full max-w-full object-fit"
											onClickOrDrag={() =>
												updateField({
													...data,
													paletteStyle,
												})
											}
											src={url}
											style={{
												objectFit: "contain",
											}}
										/>
									);
								},
							},
						},
					}}
					onChange={updateField}
					data={data}
				/>
			</div>
		</>
	);
}

ColorComponent.usePreview = () => {
	const [preview, setPreview] = useState();
	const [data] = useDataSchema("color", {
		// ...defaultColorComponentProps
	});
	const noData = !data.type;

	const handleQuickAction = (e) => {
		e.stopPropagation();

		addToDocument(preview);
	};

	useEffect(() => {
		if (preview || noData) return;

		setPreview(new ColorComponentDrawer().draw(data));
	}, []);

	const quickAction = noData
		? null
		: (children) => (
				<button
					className="flex items-center cursor-pointer bg-transparent border border-transparent p-0"
					onClick={handleQuickAction}
				>
					{children("Add to canvas")}
				</button>
		  );

	return {
		quickAction,
		preview,
	};
};

export default ColorComponent;
